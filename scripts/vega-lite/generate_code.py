import argparse
import json
from pathlib import Path
import subprocess

from config import defs
from converter import JsonSchemaConverter


def main(resolve_refs: bool, source_file: str, output_dir: str):
    """
    Converts JSON Schema and generates Pydantic models from it.

    Args:
        resolve_refs (bool): Whether to resolve $ref references.
        source_file (str): The path to the source JSON schema file.
        output_dir (str): The directory to save the generated JSON schema and Pydantic models.
    """
    # 1. Read JSON schema and apply custom conversions
    with open(source_file, "r", encoding="utf-8") as f:
        schema = json.load(f)

    converter = JsonSchemaConverter(
        includes=defs.get("includes", []),
        excludes=defs.get("excludes", []),
        unresolving_definitions=defs.get("unresolving_definitions", []),
        replace=defs.get("replace", {}),
        remove_fields=defs.get("remove_fields", []),
    )
    converted_schema = converter.convert(schema, resolve_refs=resolve_refs)

    output_json_dir = Path(output_dir)
    output_json_dir.mkdir(parents=True, exist_ok=True)
    output_json_path = output_json_dir / f"auto_generated_{defs['name']}_schema.json"

    # 2. Save the converted JSON schema to a file
    with open(output_json_path, "w", encoding="utf-8") as temp_file:
        json.dump(converted_schema, temp_file, indent=4, ensure_ascii=False)

    print(f"Converted JSON schema saved to {output_json_path}.")

    # 3. Use datamodel-code-generator to generate Pydantic models
    output_models_path = output_json_dir / f"auto_generated_{defs['name']}_models.py"

    try:
        subprocess.run([
            "datamodel-codegen", "--input",
            str(output_json_path), "--input-file-type", "jsonschema",
            "--output",
            str(output_models_path), "--disable-timestamp",
            "--custom-file-header",
            f'"""# generated by datamodel-codegen:\n#   filename:  {output_json_path.name}"""\n# pylint: disable=missing-class-docstring,invalid-name,disallowed-name'
        ],
                       check=True,
                       capture_output=True,
                       text=True)
        print(f"Pydantic models generated and saved to {output_models_path}.")
    except FileNotFoundError:
        print(
            "Error: 'datamodel-code-generator' not found. Please run 'pip install datamodel-code-generator'."
        )
    except subprocess.CalledProcessError as e:
        print(f"Error during Pydantic model generation: {e}")
        print(f"Stderr: {e.stderr}")
        print(f"Stdout: {e.stdout}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Converts JSON Schema and generates Pydantic models.")
    parser.add_argument("--resolve_refs",
                        default=True,
                        action="store_true",
                        help="Resolves $ref references in the schema.")
    parser.add_argument("--source",
                        dest="source_file",
                        type=str,
                        required=True,
                        help="Source JSON schema file path.")
    parser.add_argument("--output_dir",
                        type=str,
                        required=True,
                        help="Output directory for generated files.")
    args = parser.parse_args()
    main(resolve_refs=args.resolve_refs,
         source_file=args.source_file,
         output_dir=args.output_dir)
